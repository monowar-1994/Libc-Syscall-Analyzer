; ModuleID = 'src/crypt/crypt_des.c'
source_filename = "src/crypt/crypt_des.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.expanded_key = type { [16 x i32], [16 x i32] }

@key_perm_maskl = internal unnamed_addr constant [8 x [16 x i32]] [[16 x i32] [i32 0, i32 0, i32 16, i32 16, i32 4096, i32 4096, i32 4112, i32 4112, i32 1048576, i32 1048576, i32 1048592, i32 1048592, i32 1052672, i32 1052672, i32 1052688, i32 1052688], [16 x i32] [i32 0, i32 0, i32 32, i32 32, i32 8192, i32 8192, i32 8224, i32 8224, i32 2097152, i32 2097152, i32 2097184, i32 2097184, i32 2105344, i32 2105344, i32 2105376, i32 2105376], [16 x i32] [i32 0, i32 0, i32 64, i32 64, i32 16384, i32 16384, i32 16448, i32 16448, i32 4194304, i32 4194304, i32 4194368, i32 4194368, i32 4210688, i32 4210688, i32 4210752, i32 4210752], [16 x i32] [i32 0, i32 0, i32 128, i32 128, i32 32768, i32 32768, i32 32896, i32 32896, i32 8388608, i32 8388608, i32 8388736, i32 8388736, i32 8421376, i32 8421376, i32 8421504, i32 8421504], [16 x i32] [i32 0, i32 1, i32 256, i32 257, i32 65536, i32 65537, i32 65792, i32 65793, i32 16777216, i32 16777217, i32 16777472, i32 16777473, i32 16842752, i32 16842753, i32 16843008, i32 16843009], [16 x i32] [i32 0, i32 2, i32 512, i32 514, i32 131072, i32 131074, i32 131584, i32 131586, i32 33554432, i32 33554434, i32 33554944, i32 33554946, i32 33685504, i32 33685506, i32 33686016, i32 33686018], [16 x i32] [i32 0, i32 4, i32 1024, i32 1028, i32 262144, i32 262148, i32 263168, i32 263172, i32 67108864, i32 67108868, i32 67109888, i32 67109892, i32 67371008, i32 67371012, i32 67372032, i32 67372036], [16 x i32] [i32 0, i32 8, i32 2048, i32 2056, i32 524288, i32 524296, i32 526336, i32 526344, i32 134217728, i32 134217736, i32 134219776, i32 134219784, i32 134742016, i32 134742024, i32 134744064, i32 134744072]], align 16
@key_perm_maskr = internal unnamed_addr constant [12 x [16 x i32]] [[16 x i32] [i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1], [16 x i32] [i32 0, i32 0, i32 1048576, i32 1048576, i32 4096, i32 4096, i32 1052672, i32 1052672, i32 16, i32 16, i32 1048592, i32 1048592, i32 4112, i32 4112, i32 1052688, i32 1052688], [16 x i32] [i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2], [16 x i32] [i32 0, i32 0, i32 2097152, i32 2097152, i32 8192, i32 8192, i32 2105344, i32 2105344, i32 32, i32 32, i32 2097184, i32 2097184, i32 8224, i32 8224, i32 2105376, i32 2105376], [16 x i32] [i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4, i32 0, i32 4], [16 x i32] [i32 0, i32 0, i32 4194304, i32 4194304, i32 16384, i32 16384, i32 4210688, i32 4210688, i32 64, i32 64, i32 4194368, i32 4194368, i32 16448, i32 16448, i32 4210752, i32 4210752], [16 x i32] [i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8, i32 0, i32 8], [16 x i32] [i32 0, i32 0, i32 8388608, i32 8388608, i32 32768, i32 32768, i32 8421376, i32 8421376, i32 128, i32 128, i32 8388736, i32 8388736, i32 32896, i32 32896, i32 8421504, i32 8421504], [16 x i32] [i32 0, i32 0, i32 16777216, i32 16777216, i32 65536, i32 65536, i32 16842752, i32 16842752, i32 256, i32 256, i32 16777472, i32 16777472, i32 65792, i32 65792, i32 16843008, i32 16843008], [16 x i32] [i32 0, i32 0, i32 33554432, i32 33554432, i32 131072, i32 131072, i32 33685504, i32 33685504, i32 512, i32 512, i32 33554944, i32 33554944, i32 131584, i32 131584, i32 33686016, i32 33686016], [16 x i32] [i32 0, i32 0, i32 67108864, i32 67108864, i32 262144, i32 262144, i32 67371008, i32 67371008, i32 1024, i32 1024, i32 67109888, i32 67109888, i32 263168, i32 263168, i32 67372032, i32 67372032], [16 x i32] [i32 0, i32 0, i32 134217728, i32 134217728, i32 524288, i32 524288, i32 134742016, i32 134742016, i32 2048, i32 2048, i32 134219776, i32 134219776, i32 526336, i32 526336, i32 134744064, i32 134744064]], align 16
@key_shifts = internal unnamed_addr constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@comp_maskl0 = internal unnamed_addr constant [4 x [8 x i32]] [[8 x i32] [i32 0, i32 131072, i32 1, i32 131073, i32 524288, i32 655360, i32 524289, i32 655361], [8 x i32] [i32 0, i32 4096, i32 0, i32 4096, i32 64, i32 4160, i32 64, i32 4160], [8 x i32] [i32 0, i32 4194304, i32 32, i32 4194336, i32 32768, i32 4227072, i32 32800, i32 4227104], [8 x i32] [i32 0, i32 1048576, i32 2048, i32 1050624, i32 0, i32 1048576, i32 2048, i32 1050624]], align 16
@comp_maskr0 = internal unnamed_addr constant [4 x [8 x i32]] [[8 x i32] [i32 0, i32 2097152, i32 131072, i32 2228224, i32 2, i32 2097154, i32 131074, i32 2228226], [8 x i32] [i32 0, i32 0, i32 1048576, i32 1048576, i32 4, i32 4, i32 1048580, i32 1048580], [8 x i32] [i32 0, i32 16384, i32 2048, i32 18432, i32 0, i32 16384, i32 2048, i32 18432], [8 x i32] [i32 0, i32 4194304, i32 32768, i32 4227072, i32 8, i32 4194312, i32 32776, i32 4227080]], align 16
@comp_maskl1 = internal unnamed_addr constant [4 x [16 x i32]] [[16 x i32] [i32 0, i32 16, i32 16384, i32 16400, i32 262144, i32 262160, i32 278528, i32 278544, i32 256, i32 272, i32 16640, i32 16656, i32 262400, i32 262416, i32 278784, i32 278800], [16 x i32] [i32 0, i32 8388608, i32 2, i32 8388610, i32 512, i32 8389120, i32 514, i32 8389122, i32 2097152, i32 10485760, i32 2097154, i32 10485762, i32 2097664, i32 10486272, i32 2097666, i32 10486274], [16 x i32] [i32 0, i32 8192, i32 4, i32 8196, i32 1024, i32 9216, i32 1028, i32 9220, i32 0, i32 8192, i32 4, i32 8196, i32 1024, i32 9216, i32 1028, i32 9220], [16 x i32] [i32 0, i32 65536, i32 8, i32 65544, i32 128, i32 65664, i32 136, i32 65672, i32 0, i32 65536, i32 8, i32 65544, i32 128, i32 65664, i32 136, i32 65672]], align 16
@comp_maskr1 = internal unnamed_addr constant [4 x [16 x i32]] [[16 x i32] [i32 0, i32 0, i32 128, i32 128, i32 8192, i32 8192, i32 8320, i32 8320, i32 1, i32 1, i32 129, i32 129, i32 8193, i32 8193, i32 8321, i32 8321], [16 x i32] [i32 0, i32 16, i32 8388608, i32 8388624, i32 65536, i32 65552, i32 8454144, i32 8454160, i32 512, i32 528, i32 8389120, i32 8389136, i32 66048, i32 66064, i32 8454656, i32 8454672], [16 x i32] [i32 0, i32 1024, i32 4096, i32 5120, i32 524288, i32 525312, i32 528384, i32 529408, i32 32, i32 1056, i32 4128, i32 5152, i32 524320, i32 525344, i32 528416, i32 529440], [16 x i32] [i32 0, i32 256, i32 262144, i32 262400, i32 0, i32 256, i32 262144, i32 262400, i32 64, i32 320, i32 262208, i32 262464, i32 64, i32 320, i32 262208, i32 262464]], align 16
@ip_maskl = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 0, i32 65536, i32 0, i32 65536, i32 16777216, i32 16842752, i32 16777216, i32 16842752, i32 0, i32 65536, i32 0, i32 65536, i32 16777216, i32 16842752, i32 16777216, i32 16842752], [16 x i32] [i32 0, i32 1, i32 0, i32 1, i32 256, i32 257, i32 256, i32 257, i32 0, i32 1, i32 0, i32 1, i32 256, i32 257, i32 256, i32 257], [16 x i32] [i32 0, i32 131072, i32 0, i32 131072, i32 33554432, i32 33685504, i32 33554432, i32 33685504, i32 0, i32 131072, i32 0, i32 131072, i32 33554432, i32 33685504, i32 33554432, i32 33685504], [16 x i32] [i32 0, i32 2, i32 0, i32 2, i32 512, i32 514, i32 512, i32 514, i32 0, i32 2, i32 0, i32 2, i32 512, i32 514, i32 512, i32 514], [16 x i32] [i32 0, i32 262144, i32 0, i32 262144, i32 67108864, i32 67371008, i32 67108864, i32 67371008, i32 0, i32 262144, i32 0, i32 262144, i32 67108864, i32 67371008, i32 67108864, i32 67371008], [16 x i32] [i32 0, i32 4, i32 0, i32 4, i32 1024, i32 1028, i32 1024, i32 1028, i32 0, i32 4, i32 0, i32 4, i32 1024, i32 1028, i32 1024, i32 1028], [16 x i32] [i32 0, i32 524288, i32 0, i32 524288, i32 134217728, i32 134742016, i32 134217728, i32 134742016, i32 0, i32 524288, i32 0, i32 524288, i32 134217728, i32 134742016, i32 134217728, i32 134742016], [16 x i32] [i32 0, i32 8, i32 0, i32 8, i32 2048, i32 2056, i32 2048, i32 2056, i32 0, i32 8, i32 0, i32 8, i32 2048, i32 2056, i32 2048, i32 2056], [16 x i32] [i32 0, i32 1048576, i32 0, i32 1048576, i32 268435456, i32 269484032, i32 268435456, i32 269484032, i32 0, i32 1048576, i32 0, i32 1048576, i32 268435456, i32 269484032, i32 268435456, i32 269484032], [16 x i32] [i32 0, i32 16, i32 0, i32 16, i32 4096, i32 4112, i32 4096, i32 4112, i32 0, i32 16, i32 0, i32 16, i32 4096, i32 4112, i32 4096, i32 4112], [16 x i32] [i32 0, i32 2097152, i32 0, i32 2097152, i32 536870912, i32 538968064, i32 536870912, i32 538968064, i32 0, i32 2097152, i32 0, i32 2097152, i32 536870912, i32 538968064, i32 536870912, i32 538968064], [16 x i32] [i32 0, i32 32, i32 0, i32 32, i32 8192, i32 8224, i32 8192, i32 8224, i32 0, i32 32, i32 0, i32 32, i32 8192, i32 8224, i32 8192, i32 8224], [16 x i32] [i32 0, i32 4194304, i32 0, i32 4194304, i32 1073741824, i32 1077936128, i32 1073741824, i32 1077936128, i32 0, i32 4194304, i32 0, i32 4194304, i32 1073741824, i32 1077936128, i32 1073741824, i32 1077936128], [16 x i32] [i32 0, i32 64, i32 0, i32 64, i32 16384, i32 16448, i32 16384, i32 16448, i32 0, i32 64, i32 0, i32 64, i32 16384, i32 16448, i32 16384, i32 16448], [16 x i32] [i32 0, i32 8388608, i32 0, i32 8388608, i32 -2147483648, i32 -2139095040, i32 -2147483648, i32 -2139095040, i32 0, i32 8388608, i32 0, i32 8388608, i32 -2147483648, i32 -2139095040, i32 -2147483648, i32 -2139095040], [16 x i32] [i32 0, i32 128, i32 0, i32 128, i32 32768, i32 32896, i32 32768, i32 32896, i32 0, i32 128, i32 0, i32 128, i32 32768, i32 32896, i32 32768, i32 32896]], align 16
@ip_maskr = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 0, i32 0, i32 65536, i32 65536, i32 0, i32 0, i32 65536, i32 65536, i32 16777216, i32 16777216, i32 16842752, i32 16842752, i32 16777216, i32 16777216, i32 16842752, i32 16842752], [16 x i32] [i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 1, i32 256, i32 256, i32 257, i32 257, i32 256, i32 256, i32 257, i32 257], [16 x i32] [i32 0, i32 0, i32 131072, i32 131072, i32 0, i32 0, i32 131072, i32 131072, i32 33554432, i32 33554432, i32 33685504, i32 33685504, i32 33554432, i32 33554432, i32 33685504, i32 33685504], [16 x i32] [i32 0, i32 0, i32 2, i32 2, i32 0, i32 0, i32 2, i32 2, i32 512, i32 512, i32 514, i32 514, i32 512, i32 512, i32 514, i32 514], [16 x i32] [i32 0, i32 0, i32 262144, i32 262144, i32 0, i32 0, i32 262144, i32 262144, i32 67108864, i32 67108864, i32 67371008, i32 67371008, i32 67108864, i32 67108864, i32 67371008, i32 67371008], [16 x i32] [i32 0, i32 0, i32 4, i32 4, i32 0, i32 0, i32 4, i32 4, i32 1024, i32 1024, i32 1028, i32 1028, i32 1024, i32 1024, i32 1028, i32 1028], [16 x i32] [i32 0, i32 0, i32 524288, i32 524288, i32 0, i32 0, i32 524288, i32 524288, i32 134217728, i32 134217728, i32 134742016, i32 134742016, i32 134217728, i32 134217728, i32 134742016, i32 134742016], [16 x i32] [i32 0, i32 0, i32 8, i32 8, i32 0, i32 0, i32 8, i32 8, i32 2048, i32 2048, i32 2056, i32 2056, i32 2048, i32 2048, i32 2056, i32 2056], [16 x i32] [i32 0, i32 0, i32 1048576, i32 1048576, i32 0, i32 0, i32 1048576, i32 1048576, i32 268435456, i32 268435456, i32 269484032, i32 269484032, i32 268435456, i32 268435456, i32 269484032, i32 269484032], [16 x i32] [i32 0, i32 0, i32 16, i32 16, i32 0, i32 0, i32 16, i32 16, i32 4096, i32 4096, i32 4112, i32 4112, i32 4096, i32 4096, i32 4112, i32 4112], [16 x i32] [i32 0, i32 0, i32 2097152, i32 2097152, i32 0, i32 0, i32 2097152, i32 2097152, i32 536870912, i32 536870912, i32 538968064, i32 538968064, i32 536870912, i32 536870912, i32 538968064, i32 538968064], [16 x i32] [i32 0, i32 0, i32 32, i32 32, i32 0, i32 0, i32 32, i32 32, i32 8192, i32 8192, i32 8224, i32 8224, i32 8192, i32 8192, i32 8224, i32 8224], [16 x i32] [i32 0, i32 0, i32 4194304, i32 4194304, i32 0, i32 0, i32 4194304, i32 4194304, i32 1073741824, i32 1073741824, i32 1077936128, i32 1077936128, i32 1073741824, i32 1073741824, i32 1077936128, i32 1077936128], [16 x i32] [i32 0, i32 0, i32 64, i32 64, i32 0, i32 0, i32 64, i32 64, i32 16384, i32 16384, i32 16448, i32 16448, i32 16384, i32 16384, i32 16448, i32 16448], [16 x i32] [i32 0, i32 0, i32 8388608, i32 8388608, i32 0, i32 0, i32 8388608, i32 8388608, i32 -2147483648, i32 -2147483648, i32 -2139095040, i32 -2139095040, i32 -2147483648, i32 -2147483648, i32 -2139095040, i32 -2139095040], [16 x i32] [i32 0, i32 0, i32 128, i32 128, i32 0, i32 0, i32 128, i32 128, i32 32768, i32 32768, i32 32896, i32 32896, i32 32768, i32 32768, i32 32896, i32 32896]], align 16
@psbox = internal unnamed_addr constant [8 x [64 x i32]] [[64 x i32] [i32 8421888, i32 0, i32 32768, i32 8421890, i32 8421378, i32 33282, i32 2, i32 32768, i32 512, i32 8421888, i32 8421890, i32 512, i32 8389122, i32 8421378, i32 8388608, i32 2, i32 514, i32 8389120, i32 8389120, i32 33280, i32 33280, i32 8421376, i32 8421376, i32 8389122, i32 32770, i32 8388610, i32 8388610, i32 32770, i32 0, i32 514, i32 33282, i32 8388608, i32 32768, i32 8421890, i32 2, i32 8421376, i32 8421888, i32 8388608, i32 8388608, i32 512, i32 8421378, i32 32768, i32 33280, i32 8388610, i32 512, i32 2, i32 8389122, i32 33282, i32 8421890, i32 32770, i32 8421376, i32 8389122, i32 8388610, i32 514, i32 33282, i32 8421888, i32 514, i32 8389120, i32 8389120, i32 0, i32 32770, i32 33280, i32 0, i32 8421378], [64 x i32] [i32 1074282512, i32 1073758208, i32 16384, i32 540688, i32 524288, i32 16, i32 1074266128, i32 1073758224, i32 1073741840, i32 1074282512, i32 1074282496, i32 1073741824, i32 1073758208, i32 524288, i32 16, i32 1074266128, i32 540672, i32 524304, i32 1073758224, i32 0, i32 1073741824, i32 16384, i32 540688, i32 1074266112, i32 524304, i32 1073741840, i32 0, i32 540672, i32 16400, i32 1074282496, i32 1074266112, i32 16400, i32 0, i32 540688, i32 1074266128, i32 524288, i32 1073758224, i32 1074266112, i32 1074282496, i32 16384, i32 1074266112, i32 1073758208, i32 16, i32 1074282512, i32 540688, i32 16, i32 16384, i32 1073741824, i32 16400, i32 1074282496, i32 524288, i32 1073741840, i32 524304, i32 1073758224, i32 1073741840, i32 524304, i32 540672, i32 0, i32 1073758208, i32 16400, i32 1073741824, i32 1074266128, i32 1074282512, i32 540672], [64 x i32] [i32 260, i32 67174656, i32 0, i32 67174404, i32 67109120, i32 0, i32 65796, i32 67109120, i32 65540, i32 67108868, i32 67108868, i32 65536, i32 67174660, i32 65540, i32 67174400, i32 260, i32 67108864, i32 4, i32 67174656, i32 256, i32 65792, i32 67174400, i32 67174404, i32 65796, i32 67109124, i32 65792, i32 65536, i32 67109124, i32 4, i32 67174660, i32 256, i32 67108864, i32 67174656, i32 67108864, i32 65540, i32 260, i32 65536, i32 67174656, i32 67109120, i32 0, i32 256, i32 65540, i32 67174660, i32 67109120, i32 67108868, i32 256, i32 0, i32 67174404, i32 67109124, i32 65536, i32 67108864, i32 67174660, i32 4, i32 65796, i32 65792, i32 67108868, i32 67174400, i32 67109124, i32 260, i32 67174400, i32 65796, i32 4, i32 67174404, i32 65792], [64 x i32] [i32 -2143285248, i32 -2147479488, i32 -2147479488, i32 64, i32 4198464, i32 -2143289280, i32 -2143289344, i32 -2147479552, i32 0, i32 4198400, i32 4198400, i32 -2143285184, i32 -2147483584, i32 0, i32 4194368, i32 -2143289344, i32 -2147483648, i32 4096, i32 4194304, i32 -2143285248, i32 64, i32 4194304, i32 -2147479552, i32 4160, i32 -2143289280, i32 -2147483648, i32 4160, i32 4194368, i32 4096, i32 4198464, i32 -2143285184, i32 -2147483584, i32 4194368, i32 -2143289344, i32 4198400, i32 -2143285184, i32 -2147483584, i32 0, i32 0, i32 4198400, i32 4160, i32 4194368, i32 -2143289280, i32 -2147483648, i32 -2143285248, i32 -2147479488, i32 -2147479488, i32 64, i32 -2143285184, i32 -2147483584, i32 -2147483648, i32 4096, i32 -2143289344, i32 -2147479552, i32 4198464, i32 -2143289280, i32 -2147479552, i32 4160, i32 4194304, i32 -2143285248, i32 64, i32 4194304, i32 4096, i32 4198464], [64 x i32] [i32 128, i32 17039488, i32 17039360, i32 553648256, i32 262144, i32 128, i32 536870912, i32 17039360, i32 537133184, i32 262144, i32 16777344, i32 537133184, i32 553648256, i32 553910272, i32 262272, i32 536870912, i32 16777216, i32 537133056, i32 537133056, i32 0, i32 536871040, i32 553910400, i32 553910400, i32 16777344, i32 553910272, i32 536871040, i32 0, i32 553648128, i32 17039488, i32 16777216, i32 553648128, i32 262272, i32 262144, i32 553648256, i32 128, i32 16777216, i32 536870912, i32 17039360, i32 553648256, i32 537133184, i32 16777344, i32 536870912, i32 553910272, i32 17039488, i32 537133184, i32 128, i32 16777216, i32 553910272, i32 553910400, i32 262272, i32 553648128, i32 553910400, i32 17039360, i32 0, i32 537133056, i32 553648128, i32 262272, i32 16777344, i32 536871040, i32 262144, i32 0, i32 537133056, i32 17039488, i32 536871040], [64 x i32] [i32 268435464, i32 270532608, i32 8192, i32 270540808, i32 270532608, i32 8, i32 270540808, i32 2097152, i32 268443648, i32 2105352, i32 2097152, i32 268435464, i32 2097160, i32 268443648, i32 268435456, i32 8200, i32 0, i32 2097160, i32 268443656, i32 8192, i32 2105344, i32 268443656, i32 8, i32 270532616, i32 270532616, i32 0, i32 2105352, i32 270540800, i32 8200, i32 2105344, i32 270540800, i32 268435456, i32 268443648, i32 8, i32 270532616, i32 2105344, i32 270540808, i32 2097152, i32 8200, i32 268435464, i32 2097152, i32 268443648, i32 268435456, i32 8200, i32 268435464, i32 270540808, i32 2105344, i32 270532608, i32 2105352, i32 270540800, i32 0, i32 270532616, i32 8, i32 8192, i32 270532608, i32 2105352, i32 8192, i32 2097160, i32 268443656, i32 0, i32 270540800, i32 268435456, i32 2097160, i32 268443656], [64 x i32] [i32 1048576, i32 34603009, i32 33555457, i32 0, i32 1024, i32 33555457, i32 1049601, i32 34604032, i32 34604033, i32 1048576, i32 0, i32 33554433, i32 1, i32 33554432, i32 34603009, i32 1025, i32 33555456, i32 1049601, i32 1048577, i32 33555456, i32 33554433, i32 34603008, i32 34604032, i32 1048577, i32 34603008, i32 1024, i32 1025, i32 34604033, i32 1049600, i32 1, i32 33554432, i32 1049600, i32 33554432, i32 1049600, i32 1048576, i32 33555457, i32 33555457, i32 34603009, i32 34603009, i32 1, i32 1048577, i32 33554432, i32 33555456, i32 1048576, i32 34604032, i32 1025, i32 1049601, i32 34604032, i32 1025, i32 33554433, i32 34604033, i32 34603008, i32 1049600, i32 0, i32 1, i32 34604033, i32 0, i32 1049601, i32 34603008, i32 1024, i32 33554433, i32 33555456, i32 1024, i32 1048577], [64 x i32] [i32 134219808, i32 2048, i32 131072, i32 134350880, i32 134217728, i32 134219808, i32 32, i32 134217728, i32 131104, i32 134348800, i32 134350880, i32 133120, i32 134350848, i32 133152, i32 2048, i32 32, i32 134348800, i32 134217760, i32 134219776, i32 2080, i32 133120, i32 131104, i32 134348832, i32 134350848, i32 2080, i32 0, i32 0, i32 134348832, i32 134217760, i32 134219776, i32 133152, i32 131072, i32 133152, i32 131072, i32 134350848, i32 2048, i32 32, i32 134348832, i32 2048, i32 133152, i32 134219776, i32 32, i32 134217760, i32 134348800, i32 134348832, i32 134217728, i32 131072, i32 134219808, i32 0, i32 134350880, i32 131104, i32 134217760, i32 134348800, i32 134219776, i32 134219808, i32 0, i32 134350880, i32 133120, i32 133120, i32 2080, i32 2080, i32 131104, i32 134217728, i32 134350848]], align 16
@fp_maskl = internal unnamed_addr constant [8 x [16 x i32]] [[16 x i32] [i32 0, i32 1073741824, i32 4194304, i32 1077936128, i32 16384, i32 1073758208, i32 4210688, i32 1077952512, i32 64, i32 1073741888, i32 4194368, i32 1077936192, i32 16448, i32 1073758272, i32 4210752, i32 1077952576], [16 x i32] [i32 0, i32 268435456, i32 1048576, i32 269484032, i32 4096, i32 268439552, i32 1052672, i32 269488128, i32 16, i32 268435472, i32 1048592, i32 269484048, i32 4112, i32 268439568, i32 1052688, i32 269488144], [16 x i32] [i32 0, i32 67108864, i32 262144, i32 67371008, i32 1024, i32 67109888, i32 263168, i32 67372032, i32 4, i32 67108868, i32 262148, i32 67371012, i32 1028, i32 67109892, i32 263172, i32 67372036], [16 x i32] [i32 0, i32 16777216, i32 65536, i32 16842752, i32 256, i32 16777472, i32 65792, i32 16843008, i32 1, i32 16777217, i32 65537, i32 16842753, i32 257, i32 16777473, i32 65793, i32 16843009], [16 x i32] [i32 0, i32 -2147483648, i32 8388608, i32 -2139095040, i32 32768, i32 -2147450880, i32 8421376, i32 -2139062272, i32 128, i32 -2147483520, i32 8388736, i32 -2139094912, i32 32896, i32 -2147450752, i32 8421504, i32 -2139062144], [16 x i32] [i32 0, i32 536870912, i32 2097152, i32 538968064, i32 8192, i32 536879104, i32 2105344, i32 538976256, i32 32, i32 536870944, i32 2097184, i32 538968096, i32 8224, i32 536879136, i32 2105376, i32 538976288], [16 x i32] [i32 0, i32 134217728, i32 524288, i32 134742016, i32 2048, i32 134219776, i32 526336, i32 134744064, i32 8, i32 134217736, i32 524296, i32 134742024, i32 2056, i32 134219784, i32 526344, i32 134744072], [16 x i32] [i32 0, i32 33554432, i32 131072, i32 33685504, i32 512, i32 33554944, i32 131584, i32 33686016, i32 2, i32 33554434, i32 131074, i32 33685506, i32 514, i32 33554946, i32 131586, i32 33686018]], align 16
@.str = private unnamed_addr constant [21 x i8] c"\80\FF\80\01 \7F\81\80\80\0D\0A\FF\7F \81 test\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"_0.../9Zz\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"_0.../9ZzX7iSJNd21sU\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"\80x\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"\80x22/wK52ZKGA\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@ascii64 = internal unnamed_addr constant [65 x i8] c"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 16

; Function Attrs: nofree norecurse nosync nounwind optsize strictfp
define hidden void @__des_setkey(i8* nocapture noundef readonly %0, %struct.expanded_key* nocapture noundef writeonly %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 3
  %4 = load i8, i8* %3, align 1, !tbaa !3
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds i8, i8* %0, i64 2
  %7 = load i8, i8* %6, align 1, !tbaa !3
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 8
  %10 = or i32 %9, %5
  %11 = getelementptr inbounds i8, i8* %0, i64 1
  %12 = load i8, i8* %11, align 1, !tbaa !3
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 16
  %15 = or i32 %10, %14
  %16 = load i8, i8* %0, align 1, !tbaa !3
  %17 = zext i8 %16 to i32
  %18 = shl nuw i32 %17, 24
  %19 = or i32 %15, %18
  %20 = getelementptr inbounds i8, i8* %0, i64 7
  %21 = load i8, i8* %20, align 1, !tbaa !3
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %0, i64 6
  %24 = load i8, i8* %23, align 1, !tbaa !3
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 8
  %27 = or i32 %26, %22
  %28 = getelementptr inbounds i8, i8* %0, i64 5
  %29 = load i8, i8* %28, align 1, !tbaa !3
  %30 = zext i8 %29 to i32
  %31 = shl nuw nsw i32 %30, 16
  %32 = or i32 %27, %31
  %33 = getelementptr inbounds i8, i8* %0, i64 4
  %34 = load i8, i8* %33, align 1, !tbaa !3
  %35 = zext i8 %34 to i32
  %36 = shl nuw i32 %35, 24
  %37 = or i32 %32, %36
  br label %38

38:                                               ; preds = %2, %38
  %39 = phi i64 [ 0, %2 ], [ %75, %38 ]
  %40 = phi i32 [ 0, %2 ], [ %56, %38 ]
  %41 = phi i32 [ 0, %2 ], [ %74, %38 ]
  %42 = phi i32 [ 28, %2 ], [ %76, %38 ]
  %43 = shl nuw nsw i64 %39, 1
  %44 = lshr i32 %19, %42
  %45 = and i32 %44, 15
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @key_perm_maskl, i64 0, i64 %39, i64 %46
  %48 = load i32, i32* %47, align 4, !tbaa !6
  %49 = add nuw nsw i64 %39, 4
  %50 = lshr i32 %37, %42
  %51 = and i32 %50, 15
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @key_perm_maskl, i64 0, i64 %49, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !6
  %55 = or i32 %48, %40
  %56 = or i32 %55, %54
  %57 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* @key_perm_maskr, i64 0, i64 %43, i64 %46
  %58 = load i32, i32* %57, align 4, !tbaa !6
  %59 = add nsw i32 %42, -4
  %60 = or i64 %43, 1
  %61 = lshr i32 %19, %59
  %62 = and i32 %61, 15
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* @key_perm_maskr, i64 0, i64 %60, i64 %63
  %65 = load i32, i32* %64, align 4, !tbaa !6
  %66 = add nuw nsw i64 %39, 8
  %67 = lshr i32 %37, %59
  %68 = and i32 %67, 15
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds [12 x [16 x i32]], [12 x [16 x i32]]* @key_perm_maskr, i64 0, i64 %66, i64 %69
  %71 = load i32, i32* %70, align 4, !tbaa !6
  %72 = or i32 %58, %41
  %73 = or i32 %72, %65
  %74 = or i32 %73, %71
  %75 = add nuw nsw i64 %39, 1
  %76 = add nsw i32 %42, -8
  %77 = icmp eq i64 %75, 4
  br i1 %77, label %78, label %38

78:                                               ; preds = %38, %125
  %79 = phi i64 [ %128, %125 ], [ 0, %38 ]
  %80 = phi i32 [ %84, %125 ], [ 0, %38 ]
  %81 = getelementptr inbounds [16 x i8], [16 x i8]* @key_shifts, i64 0, i64 %79
  %82 = load i8, i8* %81, align 1, !tbaa !3
  %83 = zext i8 %82 to i32
  %84 = add i32 %80, %83
  %85 = shl i32 %56, %84
  %86 = sub i32 28, %84
  %87 = lshr i32 %56, %86
  %88 = or i32 %87, %85
  %89 = shl i32 %74, %84
  %90 = lshr i32 %74, %86
  %91 = or i32 %90, %89
  br label %92

92:                                               ; preds = %78, %92
  %93 = phi i64 [ 0, %78 ], [ %123, %92 ]
  %94 = phi i32 [ 0, %78 ], [ %121, %92 ]
  %95 = phi i32 [ 0, %78 ], [ %115, %92 ]
  %96 = phi i32 [ 25, %78 ], [ %122, %92 ]
  %97 = lshr i32 %88, %96
  %98 = and i32 %97, 7
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [4 x [8 x i32]], [4 x [8 x i32]]* @comp_maskl0, i64 0, i64 %93, i64 %99
  %101 = load i32, i32* %100, align 4, !tbaa !6
  %102 = or i32 %101, %95
  %103 = lshr i32 %91, %96
  %104 = and i32 %103, 7
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [4 x [8 x i32]], [4 x [8 x i32]]* @comp_maskr0, i64 0, i64 %93, i64 %105
  %107 = load i32, i32* %106, align 4, !tbaa !6
  %108 = or i32 %107, %94
  %109 = add nsw i32 %96, -4
  %110 = lshr i32 %88, %109
  %111 = and i32 %110, 15
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [4 x [16 x i32]], [4 x [16 x i32]]* @comp_maskl1, i64 0, i64 %93, i64 %112
  %114 = load i32, i32* %113, align 4, !tbaa !6
  %115 = or i32 %102, %114
  %116 = lshr i32 %91, %109
  %117 = and i32 %116, 15
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [4 x [16 x i32]], [4 x [16 x i32]]* @comp_maskr1, i64 0, i64 %93, i64 %118
  %120 = load i32, i32* %119, align 4, !tbaa !6
  %121 = or i32 %108, %120
  %122 = add nsw i32 %96, -7
  %123 = add nuw nsw i64 %93, 1
  %124 = icmp eq i64 %123, 4
  br i1 %124, label %125, label %92

125:                                              ; preds = %92
  %126 = getelementptr inbounds %struct.expanded_key, %struct.expanded_key* %1, i64 0, i32 0, i64 %79
  store i32 %115, i32* %126, align 4, !tbaa !6
  %127 = getelementptr inbounds %struct.expanded_key, %struct.expanded_key* %1, i64 0, i32 1, i64 %79
  store i32 %121, i32* %127, align 4, !tbaa !6
  %128 = add nuw nsw i64 %79, 1
  %129 = icmp eq i64 %128, 16
  br i1 %129, label %130, label %78

130:                                              ; preds = %125
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nosync nounwind optsize strictfp
define hidden void @__do_des(i32 noundef %0, i32 noundef %1, i32* nocapture noundef writeonly %2, i32* nocapture noundef writeonly %3, i32 noundef %4, i32 noundef %5, %struct.expanded_key* nocapture noundef readonly %6) local_unnamed_addr #0 {
  %8 = or i32 %1, %0
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %7, %10
  %11 = phi i64 [ %34, %10 ], [ 0, %7 ]
  %12 = phi i32 [ %27, %10 ], [ 0, %7 ]
  %13 = phi i32 [ %35, %10 ], [ 28, %7 ]
  %14 = phi i32 [ %33, %10 ], [ 0, %7 ]
  %15 = lshr i32 %0, %13
  %16 = and i32 %15, 15
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* @ip_maskl, i64 0, i64 %11, i64 %17
  %19 = load i32, i32* %18, align 4, !tbaa !6
  %20 = add nuw nsw i64 %11, 8
  %21 = lshr i32 %1, %13
  %22 = and i32 %21, 15
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* @ip_maskl, i64 0, i64 %20, i64 %23
  %25 = load i32, i32* %24, align 4, !tbaa !6
  %26 = or i32 %19, %12
  %27 = or i32 %26, %25
  %28 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* @ip_maskr, i64 0, i64 %11, i64 %17
  %29 = load i32, i32* %28, align 4, !tbaa !6
  %30 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* @ip_maskr, i64 0, i64 %20, i64 %23
  %31 = load i32, i32* %30, align 4, !tbaa !6
  %32 = or i32 %29, %14
  %33 = or i32 %32, %31
  %34 = add nuw nsw i64 %11, 1
  %35 = add nsw i32 %13, -4
  %36 = icmp eq i64 %34, 8
  br i1 %36, label %37, label %10

37:                                               ; preds = %10, %7
  %38 = phi i32 [ 0, %7 ], [ %33, %10 ]
  %39 = phi i32 [ 0, %7 ], [ %27, %10 ]
  %40 = icmp eq i32 %4, 0
  br i1 %40, label %47, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.expanded_key, %struct.expanded_key* %6, i64 0, i32 0, i64 0
  %43 = getelementptr inbounds %struct.expanded_key, %struct.expanded_key* %6, i64 0, i32 1, i64 0
  br label %50

44:                                               ; preds = %54
  %45 = add i32 %51, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %44, %37
  %48 = phi i32 [ %38, %37 ], [ %59, %44 ]
  %49 = phi i32 [ %39, %37 ], [ %141, %44 ]
  br label %143

50:                                               ; preds = %41, %44
  %51 = phi i32 [ %4, %41 ], [ %45, %44 ]
  %52 = phi i32 [ %39, %41 ], [ %141, %44 ]
  %53 = phi i32 [ %38, %41 ], [ %59, %44 ]
  br label %54

54:                                               ; preds = %50, %54
  %55 = phi i32 [ %52, %50 ], [ %59, %54 ]
  %56 = phi i32* [ %43, %50 ], [ %94, %54 ]
  %57 = phi i32* [ %42, %50 ], [ %90, %54 ]
  %58 = phi i32 [ 16, %50 ], [ %60, %54 ]
  %59 = phi i32 [ %53, %50 ], [ %141, %54 ]
  %60 = add nsw i32 %58, -1
  %61 = shl i32 %59, 23
  %62 = and i32 %61, 8388608
  %63 = lshr i32 %59, 9
  %64 = and i32 %63, 8126464
  %65 = or i32 %62, %64
  %66 = lshr i32 %59, 11
  %67 = and i32 %66, 258048
  %68 = or i32 %65, %67
  %69 = lshr i32 %59, 13
  %70 = and i32 %69, 4032
  %71 = or i32 %68, %70
  %72 = lshr i32 %59, 15
  %73 = and i32 %72, 63
  %74 = or i32 %71, %73
  %75 = shl i32 %59, 7
  %76 = and i32 %75, 16515072
  %77 = shl i32 %59, 5
  %78 = and i32 %77, 258048
  %79 = shl i32 %59, 3
  %80 = and i32 %79, 4032
  %81 = shl i32 %59, 1
  %82 = and i32 %81, 62
  %83 = lshr i32 %59, 31
  %84 = or i32 %78, %83
  %85 = or i32 %84, %76
  %86 = or i32 %85, %80
  %87 = or i32 %86, %82
  %88 = xor i32 %74, %87
  %89 = and i32 %88, %5
  %90 = getelementptr inbounds i32, i32* %57, i64 1
  %91 = load i32, i32* %57, align 4, !tbaa !6
  %92 = xor i32 %89, %74
  %93 = xor i32 %92, %91
  %94 = getelementptr inbounds i32, i32* %56, i64 1
  %95 = load i32, i32* %56, align 4, !tbaa !6
  %96 = xor i32 %89, %87
  %97 = xor i32 %96, %95
  %98 = lshr i32 %93, 18
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 0, i64 %99
  %101 = load i32, i32* %100, align 4, !tbaa !6
  %102 = lshr i32 %93, 12
  %103 = and i32 %102, 63
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 1, i64 %104
  %106 = load i32, i32* %105, align 4, !tbaa !6
  %107 = or i32 %106, %101
  %108 = lshr i32 %93, 6
  %109 = and i32 %108, 63
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 2, i64 %110
  %112 = load i32, i32* %111, align 4, !tbaa !6
  %113 = or i32 %107, %112
  %114 = and i32 %93, 63
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 3, i64 %115
  %117 = load i32, i32* %116, align 4, !tbaa !6
  %118 = or i32 %113, %117
  %119 = lshr i32 %97, 18
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 4, i64 %120
  %122 = load i32, i32* %121, align 4, !tbaa !6
  %123 = or i32 %118, %122
  %124 = lshr i32 %97, 12
  %125 = and i32 %124, 63
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 5, i64 %126
  %128 = load i32, i32* %127, align 4, !tbaa !6
  %129 = or i32 %123, %128
  %130 = lshr i32 %97, 6
  %131 = and i32 %130, 63
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 6, i64 %132
  %134 = load i32, i32* %133, align 4, !tbaa !6
  %135 = or i32 %129, %134
  %136 = and i32 %97, 63
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @psbox, i64 0, i64 7, i64 %137
  %139 = load i32, i32* %138, align 4, !tbaa !6
  %140 = or i32 %135, %139
  %141 = xor i32 %140, %55
  %142 = icmp eq i32 %60, 0
  br i1 %142, label %44, label %54

143:                                              ; preds = %47, %143
  %144 = phi i64 [ 0, %47 ], [ %174, %143 ]
  %145 = phi i32 [ 0, %47 ], [ %160, %143 ]
  %146 = phi i32 [ 0, %47 ], [ %173, %143 ]
  %147 = phi i32 [ 28, %47 ], [ %175, %143 ]
  %148 = lshr i32 %49, %147
  %149 = and i32 %148, 15
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @fp_maskl, i64 0, i64 %144, i64 %150
  %152 = load i32, i32* %151, align 4, !tbaa !6
  %153 = add nuw nsw i64 %144, 4
  %154 = lshr i32 %48, %147
  %155 = and i32 %154, 15
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @fp_maskl, i64 0, i64 %153, i64 %156
  %158 = load i32, i32* %157, align 4, !tbaa !6
  %159 = or i32 %152, %145
  %160 = or i32 %159, %158
  %161 = add nsw i32 %147, -4
  %162 = lshr i32 %49, %161
  %163 = and i32 %162, 15
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @fp_maskl, i64 0, i64 %144, i64 %164
  %166 = load i32, i32* %165, align 4, !tbaa !6
  %167 = lshr i32 %48, %161
  %168 = and i32 %167, 15
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* @fp_maskl, i64 0, i64 %153, i64 %169
  %171 = load i32, i32* %170, align 4, !tbaa !6
  %172 = or i32 %166, %146
  %173 = or i32 %172, %171
  %174 = add nuw nsw i64 %144, 1
  %175 = add nsw i32 %147, -8
  %176 = icmp eq i64 %174, 4
  br i1 %176, label %177, label %143

177:                                              ; preds = %143
  store i32 %173, i32* %2, align 4, !tbaa !6
  store i32 %160, i32* %3, align 4, !tbaa !6
  ret void
}

; Function Attrs: nounwind optsize strictfp
define i8* @__crypt_des(i8* nocapture noundef readonly %0, i8* noundef %1, i8* noundef %2) local_unnamed_addr #2 {
  %4 = alloca [21 x i8], align 16
  %5 = getelementptr inbounds [21 x i8], [21 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %5) #5
  %6 = load i8, i8* %1, align 1, !tbaa !3
  %7 = icmp eq i8 %6, 95
  %8 = select i1 %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)
  %9 = tail call fastcc i8* @_crypt_extended_r_uut(i8* noundef %0, i8* noundef nonnull %1, i8* noundef %2) #6
  %10 = call fastcc i8* @_crypt_extended_r_uut(i8* noundef getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* noundef %8, i8* noundef nonnull %5) #6
  %11 = icmp eq i8* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %3
  %13 = select i1 %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)
  %14 = call i32 @strcmp(i8* noundef nonnull %10, i8* noundef %13) #7
  %15 = icmp eq i32 %14, 0
  %16 = icmp ne i8* %9, null
  %17 = select i1 %15, i1 %16, i1 false
  br i1 %17, label %22, label %18

18:                                               ; preds = %12, %3
  %19 = load i8, i8* %1, align 1, !tbaa !3
  %20 = icmp eq i8 %19, 42
  %21 = select i1 %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)
  br label %22

22:                                               ; preds = %12, %18
  %23 = phi i8* [ %21, %18 ], [ %9, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %5) #5
  ret i8* %23
}

; Function Attrs: nounwind optsize strictfp
define internal fastcc i8* @_crypt_extended_r_uut(i8* nocapture noundef readonly %0, i8* noundef %1, i8* noundef %2) unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.expanded_key, align 4
  %7 = alloca [8 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast %struct.expanded_key* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #5
  %11 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #5
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  %13 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #5
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 7
  br label %15

15:                                               ; preds = %3, %15
  %16 = phi i8* [ %0, %3 ], [ %23, %15 ]
  %17 = phi i8* [ %11, %3 ], [ %20, %15 ]
  %18 = load i8, i8* %16, align 1, !tbaa !3
  %19 = shl i8 %18, 1
  %20 = getelementptr inbounds i8, i8* %17, i64 1
  store i8 %19, i8* %17, align 1, !tbaa !3
  %21 = icmp ne i8 %18, 0
  %22 = zext i1 %21 to i64
  %23 = getelementptr i8, i8* %16, i64 %22
  %24 = icmp ugt i8* %20, %14
  br i1 %24, label %25, label %15

25:                                               ; preds = %15
  call void @__des_setkey(i8* noundef nonnull %11, %struct.expanded_key* noundef nonnull %6) #6
  %26 = load i8, i8* %1, align 1, !tbaa !3
  switch i8 %26, label %160 [
    i8 95, label %27
    i8 10, label %274
    i8 0, label %274
    i8 58, label %274
  ]

27:                                               ; preds = %25, %46
  %28 = phi i64 [ %52, %46 ], [ 1, %25 ]
  %29 = phi i32 [ %51, %46 ], [ 0, %25 ]
  %30 = getelementptr inbounds i8, i8* %1, i64 %28
  %31 = load i8, i8* %30, align 1, !tbaa !3
  %32 = zext i8 %31 to i32
  %33 = or i32 %32, -256
  %34 = icmp slt i8 %31, 0
  %35 = select i1 %34, i32 %33, i32 %32
  %36 = icmp sgt i32 %35, 64
  %37 = icmp sgt i32 %35, 96
  %38 = select i1 %37, i32 5, i32 11
  %39 = select i1 %36, i32 %38, i32 18
  %40 = add nsw i32 %39, %35
  %41 = and i32 %40, 63
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1, !tbaa !3
  %45 = icmp eq i8 %44, %31
  br i1 %45, label %46, label %274

46:                                               ; preds = %27
  %47 = trunc i64 %28 to i32
  %48 = mul i32 %47, 6
  %49 = add i32 %48, -6
  %50 = shl nuw nsw i32 %41, %49
  %51 = or i32 %50, %29
  %52 = add nuw nsw i64 %28, 1
  %53 = icmp eq i64 %52, 5
  br i1 %53, label %54, label %27

54:                                               ; preds = %46
  %55 = icmp eq i32 %51, 0
  br i1 %55, label %274, label %68

56:                                               ; preds = %87
  %57 = load i8, i8* %23, align 1, !tbaa !3
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %157, label %59

59:                                               ; preds = %56
  %60 = bitcast i32* %4 to i8*
  %61 = bitcast i32* %5 to i8*
  %62 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 3
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 2
  %64 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 1
  %65 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 6
  %66 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 5
  %67 = getelementptr inbounds [8 x i8], [8 x i8]* %7, i64 0, i64 4
  br label %95

68:                                               ; preds = %54, %87
  %69 = phi i64 [ %93, %87 ], [ 5, %54 ]
  %70 = phi i32 [ %92, %87 ], [ 0, %54 ]
  %71 = getelementptr inbounds i8, i8* %1, i64 %69
  %72 = load i8, i8* %71, align 1, !tbaa !3
  %73 = zext i8 %72 to i32
  %74 = or i32 %73, -256
  %75 = icmp slt i8 %72, 0
  %76 = select i1 %75, i32 %74, i32 %73
  %77 = icmp sgt i32 %76, 64
  %78 = icmp sgt i32 %76, 96
  %79 = select i1 %78, i32 5, i32 11
  %80 = select i1 %77, i32 %79, i32 18
  %81 = add nsw i32 %80, %76
  %82 = and i32 %81, 63
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1, !tbaa !3
  %86 = icmp eq i8 %85, %72
  br i1 %86, label %87, label %274

87:                                               ; preds = %68
  %88 = trunc i64 %69 to i32
  %89 = mul i32 %88, 6
  %90 = add i32 %89, -30
  %91 = shl nuw nsw i32 %82, %90
  %92 = or i32 %91, %70
  %93 = add nuw nsw i64 %69, 1
  %94 = icmp eq i64 %93, 9
  br i1 %94, label %56, label %68

95:                                               ; preds = %59, %153
  %96 = phi i8* [ %23, %59 ], [ %154, %153 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %60) #5
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61) #5
  %97 = load i8, i8* %62, align 1, !tbaa !3
  %98 = zext i8 %97 to i32
  %99 = load i8, i8* %63, align 1, !tbaa !3
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 8
  %102 = or i32 %101, %98
  %103 = load i8, i8* %64, align 1, !tbaa !3
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 16
  %106 = or i32 %102, %105
  %107 = load i8, i8* %11, align 1, !tbaa !3
  %108 = zext i8 %107 to i32
  %109 = shl nuw i32 %108, 24
  %110 = or i32 %106, %109
  %111 = load i8, i8* %14, align 1, !tbaa !3
  %112 = zext i8 %111 to i32
  %113 = load i8, i8* %65, align 1, !tbaa !3
  %114 = zext i8 %113 to i32
  %115 = shl nuw nsw i32 %114, 8
  %116 = or i32 %115, %112
  %117 = load i8, i8* %66, align 1, !tbaa !3
  %118 = zext i8 %117 to i32
  %119 = shl nuw nsw i32 %118, 16
  %120 = or i32 %116, %119
  %121 = load i8, i8* %67, align 1, !tbaa !3
  %122 = zext i8 %121 to i32
  %123 = shl nuw i32 %122, 24
  %124 = or i32 %120, %123
  call void @__do_des(i32 noundef %110, i32 noundef %124, i32* noundef nonnull %4, i32* noundef nonnull %5, i32 noundef 1, i32 noundef 0, %struct.expanded_key* noundef nonnull %6) #7
  %125 = load i32, i32* %4, align 4, !tbaa !6
  %126 = lshr i32 %125, 24
  %127 = trunc i32 %126 to i8
  store i8 %127, i8* %11, align 1, !tbaa !3
  %128 = lshr i32 %125, 16
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %64, align 1, !tbaa !3
  %130 = lshr i32 %125, 8
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %63, align 1, !tbaa !3
  %132 = trunc i32 %125 to i8
  store i8 %132, i8* %62, align 1, !tbaa !3
  %133 = load i32, i32* %5, align 4, !tbaa !6
  %134 = lshr i32 %133, 24
  %135 = trunc i32 %134 to i8
  store i8 %135, i8* %67, align 1, !tbaa !3
  %136 = lshr i32 %133, 16
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %66, align 1, !tbaa !3
  %138 = lshr i32 %133, 8
  %139 = trunc i32 %138 to i8
  store i8 %139, i8* %65, align 1, !tbaa !3
  %140 = trunc i32 %133 to i8
  store i8 %140, i8* %14, align 1, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %60) #5
  br label %141

141:                                              ; preds = %95, %146
  %142 = phi i8* [ %96, %95 ], [ %147, %146 ]
  %143 = phi i8* [ %11, %95 ], [ %149, %146 ]
  %144 = load i8, i8* %142, align 1, !tbaa !3
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %153, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds i8, i8* %142, i64 1
  %148 = shl i8 %144, 1
  %149 = getelementptr inbounds i8, i8* %143, i64 1
  %150 = load i8, i8* %143, align 1, !tbaa !3
  %151 = xor i8 %150, %148
  store i8 %151, i8* %143, align 1, !tbaa !3
  %152 = icmp ugt i8* %149, %14
  br i1 %152, label %153, label %141

153:                                              ; preds = %146, %141
  %154 = phi i8* [ %147, %146 ], [ %142, %141 ]
  call void @__des_setkey(i8* noundef nonnull %11, %struct.expanded_key* noundef nonnull %6) #6
  %155 = load i8, i8* %154, align 1, !tbaa !3
  %156 = icmp eq i8 %155, 0
  br i1 %156, label %157, label %95

157:                                              ; preds = %153, %56
  %158 = call i8* @memcpy(i8* noundef %2, i8* noundef nonnull %1, i64 noundef 9) #7
  %159 = getelementptr inbounds i8, i8* %2, i64 9
  store i8 0, i8* %159, align 1, !tbaa !3
  br label %189

160:                                              ; preds = %25
  %161 = getelementptr inbounds i8, i8* %1, i64 1
  %162 = load i8, i8* %161, align 1, !tbaa !3
  switch i8 %162, label %163 [
    i8 10, label %274
    i8 0, label %274
    i8 58, label %274
  ]

163:                                              ; preds = %160
  %164 = zext i8 %162 to i32
  %165 = or i32 %164, -256
  %166 = icmp slt i8 %162, 0
  %167 = select i1 %166, i32 %165, i32 %164
  %168 = icmp sgt i32 %167, 64
  %169 = icmp sgt i32 %167, 96
  %170 = select i1 %169, i32 5, i32 11
  %171 = select i1 %168, i32 %170, i32 18
  %172 = add nsw i32 %171, %167
  %173 = shl nsw i32 %172, 6
  %174 = and i32 %173, 4032
  %175 = zext i8 %26 to i32
  %176 = or i32 %175, -256
  %177 = icmp slt i8 %26, 0
  %178 = select i1 %177, i32 %176, i32 %175
  %179 = icmp sgt i32 %178, 64
  %180 = icmp sgt i32 %178, 96
  %181 = select i1 %180, i32 5, i32 11
  %182 = select i1 %179, i32 %181, i32 18
  %183 = add nsw i32 %182, %178
  %184 = and i32 %183, 63
  %185 = or i32 %174, %184
  store i8 %26, i8* %2, align 1, !tbaa !3
  %186 = load i8, i8* %161, align 1, !tbaa !3
  %187 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 %186, i8* %187, align 1, !tbaa !3
  %188 = getelementptr inbounds i8, i8* %2, i64 2
  br label %189

189:                                              ; preds = %163, %157
  %190 = phi i32 [ %51, %157 ], [ 25, %163 ]
  %191 = phi i32 [ %92, %157 ], [ %185, %163 ]
  %192 = phi i8* [ %159, %157 ], [ %188, %163 ]
  br label %193

193:                                              ; preds = %193, %189
  %194 = phi i32 [ 0, %189 ], [ %204, %193 ]
  %195 = phi i32 [ 0, %189 ], [ %201, %193 ]
  %196 = phi i32 [ 1, %189 ], [ %202, %193 ]
  %197 = phi i32 [ 8388608, %189 ], [ %203, %193 ]
  %198 = and i32 %196, %191
  %199 = icmp eq i32 %198, 0
  %200 = select i1 %199, i32 0, i32 %197
  %201 = or i32 %200, %195
  %202 = shl i32 %196, 1
  %203 = lshr i32 %197, 1
  %204 = add nuw nsw i32 %194, 1
  %205 = icmp eq i32 %204, 24
  br i1 %205, label %206, label %193

206:                                              ; preds = %193
  call void @__do_des(i32 noundef 0, i32 noundef 0, i32* noundef nonnull %8, i32* noundef nonnull %9, i32 noundef %190, i32 noundef %201, %struct.expanded_key* noundef nonnull %6) #6
  %207 = load i32, i32* %8, align 4, !tbaa !6
  %208 = lshr i32 %207, 8
  %209 = lshr i32 %207, 26
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %210
  %212 = load i8, i8* %211, align 1, !tbaa !3
  %213 = getelementptr inbounds i8, i8* %192, i64 1
  store i8 %212, i8* %192, align 1, !tbaa !3
  %214 = lshr i32 %207, 20
  %215 = and i32 %214, 63
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1, !tbaa !3
  %219 = getelementptr inbounds i8, i8* %192, i64 2
  store i8 %218, i8* %213, align 1, !tbaa !3
  %220 = lshr i32 %207, 14
  %221 = and i32 %220, 63
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %222
  %224 = load i8, i8* %223, align 1, !tbaa !3
  %225 = getelementptr inbounds i8, i8* %192, i64 3
  store i8 %224, i8* %219, align 1, !tbaa !3
  %226 = and i32 %208, 63
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %227
  %229 = load i8, i8* %228, align 1, !tbaa !3
  %230 = getelementptr inbounds i8, i8* %192, i64 4
  store i8 %229, i8* %225, align 1, !tbaa !3
  %231 = load i32, i32* %9, align 4, !tbaa !6
  %232 = call i32 @llvm.fshl.i32(i32 %207, i32 %231, i32 16)
  %233 = lshr i32 %232, 18
  %234 = and i32 %233, 63
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %235
  %237 = load i8, i8* %236, align 1, !tbaa !3
  %238 = getelementptr inbounds i8, i8* %192, i64 5
  store i8 %237, i8* %230, align 1, !tbaa !3
  %239 = lshr i32 %232, 12
  %240 = and i32 %239, 63
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1, !tbaa !3
  %244 = getelementptr inbounds i8, i8* %192, i64 6
  store i8 %243, i8* %238, align 1, !tbaa !3
  %245 = lshr i32 %232, 6
  %246 = and i32 %245, 63
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %247
  %249 = load i8, i8* %248, align 1, !tbaa !3
  %250 = getelementptr inbounds i8, i8* %192, i64 7
  store i8 %249, i8* %244, align 1, !tbaa !3
  %251 = and i32 %232, 63
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %252
  %254 = load i8, i8* %253, align 1, !tbaa !3
  %255 = getelementptr inbounds i8, i8* %192, i64 8
  store i8 %254, i8* %250, align 1, !tbaa !3
  %256 = shl i32 %231, 2
  %257 = lshr i32 %256, 12
  %258 = and i32 %257, 63
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %259
  %261 = load i8, i8* %260, align 1, !tbaa !3
  %262 = getelementptr inbounds i8, i8* %192, i64 9
  store i8 %261, i8* %255, align 1, !tbaa !3
  %263 = lshr i32 %256, 6
  %264 = and i32 %263, 63
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %265
  %267 = load i8, i8* %266, align 1, !tbaa !3
  %268 = getelementptr inbounds i8, i8* %192, i64 10
  store i8 %267, i8* %262, align 1, !tbaa !3
  %269 = and i32 %256, 60
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds [65 x i8], [65 x i8]* @ascii64, i64 0, i64 %270
  %272 = load i8, i8* %271, align 4, !tbaa !3
  %273 = getelementptr inbounds i8, i8* %192, i64 11
  store i8 %272, i8* %268, align 1, !tbaa !3
  store i8 0, i8* %273, align 1, !tbaa !3
  br label %274

274:                                              ; preds = %27, %68, %160, %160, %160, %25, %25, %25, %54, %206
  %275 = phi i8* [ %2, %206 ], [ null, %54 ], [ null, %160 ], [ null, %160 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %160 ], [ null, %68 ], [ null, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #5
  ret i8* %275
}

; Function Attrs: optsize
declare i32 @strcmp(i8* noundef, i8* noundef) local_unnamed_addr #3

; Function Attrs: optsize
declare i8* @memcpy(i8* noundef, i8* noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #4

attributes #0 = { nofree norecurse nosync nounwind optsize strictfp "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "strictfp" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nounwind optsize strictfp "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "strictfp" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { optsize "frame-pointer"="none" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #5 = { nounwind strictfp }
attributes #6 = { nobuiltin optsize strictfp "no-builtins" }
attributes #7 = { nobuiltin nounwind optsize strictfp "no-builtins" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"Ubuntu clang version 14.0.6"}
!3 = !{!4, !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !4, i64 0}
